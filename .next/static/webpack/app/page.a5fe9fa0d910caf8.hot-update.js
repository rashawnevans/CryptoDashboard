"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/app/lib/constants.ts":
/*!**********************************!*\
  !*** ./src/app/lib/constants.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ONE_DAY: function() { return /* binding */ ONE_DAY; },\n/* harmony export */   cryptos: function() { return /* binding */ cryptos; }\n/* harmony export */ });\nconst ONE_DAY = 1000 * 60 * 60 * 24;\nconst cryptos = [\n    {\n        name: \"bitcoin\",\n        ticker: \"BTC\"\n    },\n    {\n        name: \"ethereum\",\n        ticker: \"ETH\"\n    },\n    {\n        name: \"solana\",\n        ticker: \"SOL\"\n    },\n    {\n        name: \"xrp\",\n        ticker: \"XRP\"\n    },\n    {\n        name: \"cardano\",\n        ticker: \"ADA\"\n    },\n    {\n        name: \"polkadot\",\n        ticker: \"DOT\"\n    },\n    {\n        name: \"avalanche\",\n        ticker: \"AVAX\"\n    },\n    {\n        name: \"polygon\",\n        ticker: \"MATIC\"\n    },\n    {\n        name: \"chainlink\",\n        ticker: \"LINK\"\n    },\n    {\n        name: \"litecoin\",\n        ticker: \"LTC\"\n    },\n    {\n        name: \"bitcoin-cash\",\n        ticker: \"BCH\"\n    },\n    {\n        name: \"cosmos\",\n        ticker: \"ATOM\"\n    },\n    {\n        name: \"uniswap\",\n        ticker: \"UNI\"\n    },\n    {\n        name: \"internet-computer\",\n        ticker: \"ICP\"\n    },\n    {\n        name: \"monero\",\n        ticker: \"XMR\"\n    }\n];\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvbGliL2NvbnN0YW50cy50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUVPLE1BQU1BLFVBQWtCLE9BQU8sS0FBSyxLQUFLLEdBQUc7QUFDNUMsTUFBTUMsVUFBb0I7SUFDL0I7UUFBRUMsTUFBTTtRQUFXQyxRQUFRO0lBQU07SUFDakM7UUFBRUQsTUFBTTtRQUFZQyxRQUFRO0lBQU07SUFDbEM7UUFBRUQsTUFBTTtRQUFVQyxRQUFRO0lBQU07SUFDaEM7UUFBRUQsTUFBTTtRQUFPQyxRQUFRO0lBQU07SUFDN0I7UUFBRUQsTUFBTTtRQUFXQyxRQUFRO0lBQU07SUFDakM7UUFBRUQsTUFBTTtRQUFZQyxRQUFRO0lBQU07SUFDbEM7UUFBRUQsTUFBTTtRQUFhQyxRQUFRO0lBQU87SUFDcEM7UUFBRUQsTUFBTTtRQUFXQyxRQUFRO0lBQVE7SUFDbkM7UUFBRUQsTUFBTTtRQUFhQyxRQUFRO0lBQU87SUFDcEM7UUFBRUQsTUFBTTtRQUFZQyxRQUFRO0lBQU07SUFDbEM7UUFBRUQsTUFBTTtRQUFnQkMsUUFBUTtJQUFNO0lBQ3RDO1FBQUVELE1BQU07UUFBVUMsUUFBUTtJQUFPO0lBQ2pDO1FBQUVELE1BQU07UUFBV0MsUUFBUTtJQUFNO0lBQ2pDO1FBQUVELE1BQU07UUFBcUJDLFFBQVE7SUFBTTtJQUMzQztRQUFFRCxNQUFNO1FBQVVDLFFBQVE7SUFBTTtDQUNqQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9hcHAvbGliL2NvbnN0YW50cy50cz81MDYwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENyeXB0byB9IGZyb20gXCIuL2RlZmluaXRpb25zXCI7XG5cbmV4cG9ydCBjb25zdCBPTkVfREFZOiBudW1iZXIgPSAxMDAwICogNjAgKiA2MCAqIDI0O1xuZXhwb3J0IGNvbnN0IGNyeXB0b3M6IENyeXB0b1tdID0gW1xuICB7IG5hbWU6IFwiYml0Y29pblwiLCB0aWNrZXI6IFwiQlRDXCIgfSxcbiAgeyBuYW1lOiBcImV0aGVyZXVtXCIsIHRpY2tlcjogXCJFVEhcIiB9LFxuICB7IG5hbWU6IFwic29sYW5hXCIsIHRpY2tlcjogXCJTT0xcIiB9LFxuICB7IG5hbWU6IFwieHJwXCIsIHRpY2tlcjogXCJYUlBcIiB9LFxuICB7IG5hbWU6IFwiY2FyZGFub1wiLCB0aWNrZXI6IFwiQURBXCIgfSxcbiAgeyBuYW1lOiBcInBvbGthZG90XCIsIHRpY2tlcjogXCJET1RcIiB9LFxuICB7IG5hbWU6IFwiYXZhbGFuY2hlXCIsIHRpY2tlcjogXCJBVkFYXCIgfSxcbiAgeyBuYW1lOiBcInBvbHlnb25cIiwgdGlja2VyOiBcIk1BVElDXCIgfSxcbiAgeyBuYW1lOiBcImNoYWlubGlua1wiLCB0aWNrZXI6IFwiTElOS1wiIH0sXG4gIHsgbmFtZTogXCJsaXRlY29pblwiLCB0aWNrZXI6IFwiTFRDXCIgfSxcbiAgeyBuYW1lOiBcImJpdGNvaW4tY2FzaFwiLCB0aWNrZXI6IFwiQkNIXCIgfSxcbiAgeyBuYW1lOiBcImNvc21vc1wiLCB0aWNrZXI6IFwiQVRPTVwiIH0sXG4gIHsgbmFtZTogXCJ1bmlzd2FwXCIsIHRpY2tlcjogXCJVTklcIiB9LFxuICB7IG5hbWU6IFwiaW50ZXJuZXQtY29tcHV0ZXJcIiwgdGlja2VyOiBcIklDUFwiIH0sXG4gIHsgbmFtZTogXCJtb25lcm9cIiwgdGlja2VyOiBcIlhNUlwiIH0sXG5dO1xuIl0sIm5hbWVzIjpbIk9ORV9EQVkiLCJjcnlwdG9zIiwibmFtZSIsInRpY2tlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/lib/constants.ts\n"));

/***/ })

});